# pylint: disable=invalid-name,missing-module-docstring,missing-class-docstring,missing-function-docstring,too-many-lines,unused-argument,unused-import,unused-variable
from __future__ import annotations

from typing import Any, Iterator, Optional, Union

import Siemens.Engineering as tia  # pylint: disable=import-error
import Siemens.Engineering.HW as hw  # pylint: disable=import-error
import Siemens.Engineering.Library as lib  # pylint: disable=import-error
import Siemens.Engineering.Library.MasterCopies as lib_mc  # pylint: disable=import-error
import Siemens.Engineering.Library.Types as lib_type  # pylint: disable=import-error
import Siemens.Engineering.SW as sw  # pylint: disable=import-error
import Siemens.Engineering.SW.Blocks as swb  # pylint: disable=import-error
from System.IO import FileInfo  # pylint: disable=import-error
from tia_portal.protocol.composition import Composition, CompositionItem
from tia_portal.protocol.objects import TiaObject
from tia_portal.version import TIAVersion

dll_path: str

class Device(CompositionItem):
    parent: Devices
    name: str
    def __init__(self, parent: Devices, name: str) -> None: ...
    @property
    def value(self) -> Optional[hw.Device]: ...
    @value.setter
    def value(self, value: Optional[hw.Device]) -> None: ...
    def exists(self) -> bool: ...
    def remove(self) -> None: ...
    def delete(self) -> None: ...
    def get_items(self) -> DeviceItems: ...

class Devices(Composition[Device]):
    parent: Project
    def __init__(self, parent: Project) -> None: ...
    @property
    def value(self) -> Optional[hw.DeviceComposition]: ...
    @value.setter
    def value(self, value: Optional[hw.DeviceComposition]) -> None: ...
    def find(self, name: str) -> Device: ...
    def __iter__(self) -> Iterator[Device]: ...
    def create(self, HwTypeIdentifier: str, name: str, device_name: Optional[str]) -> Device: ...
    def create_PLC(self, article_no: str, version: str, name: str, device_name: str) -> Device: ...
    def create_HMI(self, article_no: str, version: str, name: str) -> Device: ...

class DeviceItem(CompositionItem):
    parent: DeviceItems
    name: str
    def __init__(self, parent: DeviceItems, name: str) -> None: ...
    @property
    def value(self) -> Optional[hw.DeviceItem]: ...
    @value.setter
    def value(self, value: Optional[hw.DeviceItem]) -> None: ...
    def get_software(self) -> Union[PLCSoftware, None]: ...
    def get_items(self) -> Optional[DeviceItems]: ...

class DeviceItems(Composition[DeviceItem]):
    parent: Union[Device, DeviceItem]
    def __init__(self, parent: Union[Device, DeviceItem]) -> None: ...
    @property
    def value(self) -> Optional[hw.DeviceItemComposition]: ...
    @value.setter
    def value(self, value: Optional[hw.DeviceItemComposition]) -> None: ...
    def find(self, name: str) -> DeviceItem: ...
    def __iter__(self) -> Iterator[DeviceItem]: ...
    def get_device_items(self) -> list[DeviceItem]: ...

class PLCSoftware(TiaObject):
    parent: DeviceItem
    def __init__(self, parent: DeviceItem) -> None: ...
    @property
    def value(self) -> Optional[sw.PlcSoftware]: ...
    @value.setter
    def value(self, value: Optional[sw.PlcSoftware]) -> None: ...
    def get_system_block_groups(self) -> PLCSystemBlockGroups: ...
    def get_user_block_groups(self) -> PLCUserBlockGroups: ...
    def get_blocks(self) -> PLCBlocks: ...
    def get_all_blocks(self, recursive: bool = ...) -> list[PLCBlock]: ...

class PLCSystemBlockGroup(CompositionItem):
    parent: PLCSystemBlockGroups
    name: str
    def __init__(self, parent: PLCSystemBlockGroups, name: str) -> None: ...
    @property
    def value(self) -> Optional[swb.PlcSystemBlockGroup]: ...
    @value.setter
    def value(self, value: Optional[swb.PlcSystemBlockGroup]) -> None: ...
    def get_groups(self) -> PLCSystemBlockGroups: ...
    def get_blocks(self) -> PLCBlocks: ...
    def get_all_blocks(self, recursive: bool = ...) -> list[PLCBlock]: ...

class PLCSystemBlockGroups(Composition[PLCSystemBlockGroup]):
    parent: Union[PLCSoftware, PLCSystemBlockGroup]
    def __init__(self, parent: Union[PLCSoftware, PLCSystemBlockGroup]) -> None: ...
    @property
    def value(self) -> Optional[swb.PlcSystemBlockGroupComposition]: ...
    @value.setter
    def value(self, value: Optional[swb.PlcSystemBlockGroupComposition]) -> None: ...
    def find(self, name: str) -> PLCSystemBlockGroup: ...
    def __iter__(self) -> Iterator[PLCSystemBlockGroup]: ...
    def create(self, name: str) -> PLCSystemBlockGroup: ...

class PLCUserBlockGroup(CompositionItem):
    parent: PLCUserBlockGroups
    name: str
    value: Optional[swb.PlcBlockUserGroup]
    def __init__(self, parent: PLCUserBlockGroups, name: str) -> None: ...
    def get_groups(self) -> PLCUserBlockGroups: ...
    def get_blocks(self) -> PLCBlocks: ...
    def get_all_blocks(self, recursive: bool = ...) -> list[PLCBlock]: ...

class PLCUserBlockGroups(Composition[PLCUserBlockGroup]):
    parent: Union[PLCSoftware, PLCUserBlockGroup]
    value: Optional[swb.PlcBlockUserGroupComposition]
    def __init__(self, parent: Union[PLCSoftware, PLCUserBlockGroup]) -> None: ...
    def find(self, name: str) -> PLCUserBlockGroup: ...
    def __iter__(self) -> Iterator[PLCUserBlockGroup]: ...
    def create(self, name: str) -> PLCUserBlockGroup: ...

class PLCBlock(CompositionItem):
    parent: PLCBlocks
    name: str
    value: Optional[swb.PlcBlock]
    def __init__(self, parent: PLCBlocks, name: str) -> None: ...
    def export(self) -> str: ...

class PLCBlocks(Composition[PLCBlock]):
    parent: Union[PLCSoftware, PLCSystemBlockGroup, PLCUserBlockGroup]
    def __init__(
        self,
        parent: Union[PLCSoftware, PLCSystemBlockGroup, PLCUserBlockGroup],
    ) -> None: ...
    @property
    def value(self) -> Optional[swb.PlcBlockComposition]: ...
    @value.setter
    def value(self, value: Optional[swb.PlcBlockComposition]) -> None: ...
    def find(self, name: str) -> PLCBlock: ...
    def __iter__(self) -> Iterator[PLCBlock]: ...
    def create(self, path: str, name: str) -> PLCBlock: ...
    def create_instance_database(self, name: str, fb_name: str) -> PLCBlock: ...
    def create_prodiag_block(self, name: str) -> PLCBlock: ...

class GlobalLibrary(CompositionItem):
    parent: GlobalLibraries
    name: str
    def __init__(self, parent: GlobalLibraries, name: str) -> None: ...
    @property
    def value(self) -> Optional[lib.GlobalLibrary]: ...
    @value.setter
    def value(self, value: Optional[lib.GlobalLibrary]) -> None: ...
    @property
    def type_folder(self) -> LibraryTypeFolder: ...
    @type_folder.setter
    def type_folder(self, value: LibraryTypeFolder) -> None: ...
    @property
    def master_copy_folder(self) -> MasterCopyFolder: ...
    @master_copy_folder.setter
    def master_copy_folder(self, value: MasterCopyFolder) -> None: ...

class GlobalLibraries(Composition[GlobalLibrary]):
    parent: Client
    def __init__(self, parent: Client) -> None: ...
    @property
    def value(self) -> Optional[lib.GlobalLibraryComposition]: ...
    @value.setter
    def value(self, value: Optional[lib.GlobalLibraryComposition]) -> None: ...
    def find(self, name: str) -> GlobalLibrary: ...
    def __iter__(self) -> Iterator[GlobalLibrary]: ...

class LibraryTypeFolder(TiaObject):
    parent: GlobalLibrary
    def __init__(self, parent: GlobalLibrary) -> None: ...
    @property
    def value(self) -> Optional[lib_type.LibraryTypeFolder]: ...
    @value.setter
    def value(self, value: Optional[lib_type.LibraryTypeFolder]) -> None: ...
    @property
    def folders(self) -> LibraryTypeUserFolders: ...
    @folders.setter
    def folders(self, value: LibraryTypeUserFolders) -> None: ...
    @property
    def types(self) -> LibraryTypes: ...
    @types.setter
    def types(self, value: LibraryTypes) -> None: ...

class LibraryTypeUserFolder(CompositionItem):
    parent: LibraryTypeUserFolders
    name: str
    def __init__(self, parent: LibraryTypeUserFolders, name: str) -> None: ...
    @property
    def value(self) -> Optional[lib_type.LibraryTypeUserFolder]: ...
    @value.setter
    def value(self, value: Optional[lib_type.LibraryTypeUserFolder]) -> None: ...
    @property
    def folders(self) -> LibraryTypeUserFolders: ...
    @folders.setter
    def folders(self, value: LibraryTypeUserFolders) -> None: ...
    @property
    def types(self) -> LibraryTypes: ...
    @types.setter
    def types(self, value: LibraryTypes) -> None: ...

class LibraryTypeUserFolders(Composition[LibraryTypeUserFolder]):
    parent: Union[LibraryTypeFolder, LibraryTypeUserFolder]
    def __init__(self, parent: Union[LibraryTypeFolder, LibraryTypeUserFolder]) -> None: ...
    @property
    def value(self) -> Optional[lib_type.LibraryTypeUserFolderComposition]: ...
    @value.setter
    def value(self, value: Optional[lib_type.LibraryTypeUserFolderComposition]) -> None: ...
    def find(self, name: str) -> LibraryTypeUserFolder: ...
    def __iter__(self) -> Iterator[LibraryTypeUserFolder]: ...

class LibraryType(CompositionItem):
    parent: LibraryTypes
    name: str
    def __init__(self, parent: LibraryTypes, name: str) -> None: ...
    @property
    def value(self) -> Optional[lib_type.LibraryType]: ...
    @value.setter
    def value(self, value: Optional[lib_type.LibraryType]) -> None: ...

class LibraryTypes(Composition[LibraryType]):
    parent: Union[LibraryTypeFolder, LibraryTypeUserFolder]
    def __init__(self, parent: Union[LibraryTypeFolder, LibraryTypeUserFolder]) -> None: ...
    @property
    def value(self) -> Optional[lib_type.LibraryTypeComposition]: ...
    @value.setter
    def value(self, value: Optional[lib_type.LibraryTypeComposition]) -> None: ...
    def find(self, name: str) -> LibraryType: ...
    def __iter__(self) -> Iterator[LibraryType]: ...

class MasterCopyFolder(TiaObject):
    parent: GlobalLibrary
    def __init__(self, parent: GlobalLibrary) -> None: ...
    @property
    def value(self) -> Optional[lib_mc.MasterCopyFolder]: ...
    @value.setter
    def value(self, value: Optional[lib_mc.MasterCopyFolder]) -> None: ...
    @property
    def folders(self) -> MasterCopyUserFolders: ...
    @folders.setter
    def folders(self, value: MasterCopyUserFolders) -> None: ...
    @property
    def master_copies(self) -> MasterCopies: ...
    @master_copies.setter
    def master_copies(self, value: MasterCopies) -> None: ...

class MasterCopyUserFolder(CompositionItem):
    parent: MasterCopyUserFolders
    name: str
    def __init__(self, parent: MasterCopyUserFolders, name: str) -> None: ...
    @property
    def value(self) -> Optional[lib_mc.MasterCopyUserFolder]: ...
    @value.setter
    def value(self, value: Optional[lib_mc.MasterCopyUserFolder]) -> None: ...
    @property
    def folders(self) -> MasterCopyUserFolders: ...
    @folders.setter
    def folders(self, value: MasterCopyUserFolders) -> None: ...
    @property
    def master_copies(self) -> MasterCopies: ...
    @master_copies.setter
    def master_copies(self, value: MasterCopies) -> None: ...

class MasterCopyUserFolders(Composition[MasterCopyUserFolder]):
    parent: Union[MasterCopyFolder, MasterCopyUserFolder]
    def __init__(self, parent: Union[MasterCopyFolder, MasterCopyUserFolder]) -> None: ...
    @property
    def value(self) -> Optional[lib_mc.MasterCopyUserFolderComposition]: ...
    @value.setter
    def value(self, value: Optional[lib_mc.MasterCopyUserFolderComposition]) -> None: ...
    def find(self, name: str) -> MasterCopyUserFolder: ...
    def __iter__(self) -> Iterator[MasterCopyUserFolder]: ...

class MasterCopy(CompositionItem):
    parent: MasterCopies
    name: str
    def __init__(self, parent: MasterCopies, name: str) -> None: ...
    @property
    def value(self) -> Optional[lib_mc.MasterCopy]: ...
    @value.setter
    def value(self, value: Optional[lib_mc.MasterCopy]) -> None: ...

class MasterCopies(Composition[MasterCopy]):
    parent: Union[MasterCopyFolder, MasterCopyUserFolder]
    def __init__(self, parent: Union[MasterCopyFolder, MasterCopyUserFolder]) -> None: ...
    @property
    def value(self) -> Optional[lib_mc.MasterCopyComposition]: ...
    @value.setter
    def value(self, value: Optional[lib_mc.MasterCopyComposition]) -> None: ...
    def find(self, name: str) -> MasterCopy: ...
    def __iter__(self) -> Iterator[MasterCopy]: ...

class Client:
    session: Optional[tia.TiaPortal]
    project: Optional[Project]
    def __init__(self) -> None: ...
    def open_gui(self) -> None: ...
    def close_gui(self) -> None: ...
    def close(self) -> None: ...
    def quit(self) -> None: ...
    def __del__(self) -> None: ...
    def open_project(
        self,
        path: str,
        name: str,
        version: Optional[TIAVersion] = ...,
    ) -> Project: ...
    def create_project(
        self,
        path: str,
        name: str,
        version: Optional[TIAVersion] = ...,
    ) -> Project: ...
    def create_projects(
        self,
        path: str,
        names: list[str],
        version: Optional[TIAVersion] = ...,
    ) -> list[Project]: ...

class Project(TiaObject):
    client: Client
    path: str
    name: str
    version: Optional[TIAVersion]
    def __init__(
        self,
        client: Client,
        path: str,
        name: str,
        version: Optional[TIAVersion] = ...,
    ) -> None: ...
    @property
    def value(self) -> Optional[tia.Project]: ...
    @value.setter
    def value(self, value: Optional[tia.Project]) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def force_close(self) -> None: ...
    def create(self, open_existing: bool = ...) -> None: ...
    def save(self) -> None: ...
    def is_modified(self) -> bool: ...
    def compile(self) -> None: ...
    def get_file_info(self) -> FileInfo: ...
    def is_open(self) -> bool: ...
    def get_device_item(self, name: str) -> Optional[DeviceItem]: ...
    def get_plcs(self) -> list[DeviceItem]: ...
    @property
    def devices(self) -> Devices: ...
    @devices.setter
    def devices(self, value: Any) -> None: ...
